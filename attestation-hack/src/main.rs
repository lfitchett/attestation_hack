use guid_create::GUID;
use hex::FromHex;
use jsonwebtoken::*;
use serde_json::json;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let quote_hex
    let enclave_held_data_hex

    // println!("Attest Body: {:#?}", attest(quote_hex, enclave_held_data_hex).await?);
    println!("CyRes Response Body: {:#?}", attest_cyres().await?);
    Ok(())
}

async fn attest(
    quote_hex: &str,
    enclave_held_data_hex: &str,
) -> Result<String, Box<dyn std::error::Error>> {
    let quote_base64 = hex_to_base64(quote_hex)?;
    let enclave_held_data_base64 = hex_to_base64(enclave_held_data_hex)?;

    let body = json! {
        {
            "Report": quote_base64,
            "RuntimeData" : {
                "Data": enclave_held_data_base64,
                "DataType": "Binary"
            },
        }
    };
    // println!("Body: {}", serde_json::to_string(&body)?);

    let client = reqwest::Client::new();
    let enclave_request = client.post("https://hackprovider.wus.attest.azure.net:443/attest/OpenEnclave?api-version=2020-10-01")
        // .header("Authorization", format!("Bearer {}", get_aad_token().await?))
        .header("Content-Type", "application/json")
        .body(serde_json::to_string(&body)?)
        .send().await?;

    // println!("Enclave Response: {:#?}", enclave_request);

    let body = enclave_request.text().await?;
    // println!("Enclave Response Body: {:#?}", body);

    Ok(body)
}

async fn attest_cyres() -> Result<String, Box<dyn std::error::Error>> {
    let chain = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNoekNDQWkyZ0F3SUJBZ0lRSWEvYjRheHRYMW9xZTJVYzR1amViekFLQmdncWhrak9QUVFEQWpBOE1Sb3dHQVlEVlFRRERCRlBVQzFVUlVVZ1UwbE5JRXh2WVdSbGNqRUxNQWtHQTFVRUJnd0NWVk14RVRBUEJnTlZCQW9NQ0ZOSlRWOVVSVk5VTUI0WERURTNNREV3TVRBd01EQXdNRm9YRFRNM01ERXdNVEF3TURBd01Gb3dRREVlTUJ3R0ExVUVBd3dWVDBWVWNuVnpkR1ZrSUVGd2NHeHBZMkYwYVc5dU1Rc3dDUVlEVlFRR0RBSlZVekVSTUE4R0ExVUVDZ3dJVTBsTlgxUkZVMVF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFtMzFwL2NFMlp0ZXIwNytyUVltcjdFQU5TZWUvRVhUM2ZHRGtaeG14RDlzZHpkMTcyUjhpSkRJSVZVbFE1UU1sQ0cyRVJ4bm9HdldiWmh6Z2RNY1YxbzRJQkN6Q0NBUWN3S1FZRFZSME9CQ0lFSUYvcDlZa0xPNCtmUzlnNHZiTzZ0bWlRVnliMzlQTnZ6Y3gwd0RTRVBEVEVNQ3NHQTFVZEl3UWtNQ0tBSUFRMm5rNFNXSmJPYWwzcE1sUGFuS0cwTUhzazV2ZlBPM0t3S1ZKNnZsRHpNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUV3RGdZRFZSMFBCQWNEQlFDR0FBQUFNSUdJQmdabmdRVUZCQUlFZmdSOG8yTldSVklCYUVOUFJFVkJWVlJJV0VFRW5Bb1N0MVVrVkhqazhtTWRlVHBKOUZ3NGIxWnMyVERVWXAvNkE2bGx3QzBqVWYvbTg3KzB1akJUUTVaeXJlZWY1NkNQQXBQTjlPSFB5ZGFCNS9CKzAyZEdTVkpOVjBsRVdDQ2FoV0diUHJUdmlmdUJzUnhVbk1KbEdyMWZ4N1d3M2t2dmNBV3h1ZEJ3T1RBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlCUlhEMXV1ZU9XdVFUVC9zcC9WUDNORE1IcGw3ODNYY3BSV3RDbXc3UURYd0loQUpxMmZwa2kveFdrYno1VGlwT2tpTkxGZXlIZGltMVJJTVlRY2FoSkM5WEgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ2dUQ0NBaWVnQXdJQkFnSVFkdy9oeHJNVUhVWlNXSVFjQ2JzQUxEQUtCZ2dxaGtqT1BRUURBakE2TVJnd0ZnWURWUVFEREE5UFVDMVVSVVVnVTBsTklGSnZiM1F4Q3pBSkJnTlZCQVlNQWxWVE1SRXdEd1lEVlFRS0RBaFRTVTFmVkVWVFZEQWVGdzB4TnpBeE1ERXdNREF3TURCYUZ3MHpOekF4TURFd01EQXdNREJhTUR3eEdqQVlCZ05WQkFNTUVVOVFMVlJGUlNCVFNVMGdURzloWkdWeU1Rc3dDUVlEVlFRR0RBSlZVekVSTUE4R0ExVUVDZ3dJVTBsTlgxUkZVMVF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVM0aFdjTkdXdG16cHlSTVlUeWNXSWU1bG5UdTd5Q2NVdU94RGIwNkQ1bmtmcFhKODlvcGpwaHR3RmRGWk8yOVJFWk5WYmo2QWNMRDAzRTNzd25McHNtbzRJQkN6Q0NBUWN3S1FZRFZSME9CQ0lFSUFRMm5rNFNXSmJPYWwzcE1sUGFuS0cwTUhzazV2ZlBPM0t3S1ZKNnZsRHpNQ3NHQTFVZEl3UWtNQ0tBSU9qalhRQjBwY015dDBTaE54SjFSZjlYaUlGMHNKUnFWdjdYbmR3QUMrOGFNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUl3RGdZRFZSMFBCQWNEQlFDR0FBQUFNSUdJQmdabmdRVUZCQUlFZmdSOG8yTldSVklCYUVOUFJFVkJWVlJJV0VFRW5Bb1N0MVVrVkhqazhtTWRlVHBKOUZ3NGIxWnMyVERVWXAvNkE2bGx3QzBqVWYvbTg3KzB1akJUUTVaeXJlZWY1NkNQQXBQTjlPSFB5ZGFCNS9CKzAyZEdTVkpOVjBsRVdDQ2x0RG42NzhEQVgya3FKSmEwbzJyZXBpQnMxM2tScUJaeno4bkdIWWI4RVRBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlCUlhEMXV1ZU9XdVFUVC9zcC9WUDNORE1IcGw3ODNYY3BSV3RDbXc3UURYd0loQVBJbFU3blg5SDJJQ1RxNG15Vi8xVEhtMk81cDJVNkxmcGp2ZUdDcFhBVEQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ3pUQ0NBblNnQXdJQkFnSVFmY2VLNHlPRkV6ZjkwaWpyR20wMWtUQUtCZ2dxaGtqT1BRUURBakE5TVJzd0dRWURWUVFEREJKUFJTQlBVQzFVUlVVZ1UwbE5JRkp2YjNReEN6QUpCZ05WQkFZTUFsVlRNUkV3RHdZRFZRUUtEQWhUU1UxZlZFVlRWREFlRncweE56QXhNREV3TURBd01EQmFGdzB6TnpBeE1ERXdNREF3TURCYU1Eb3hHREFXQmdOVkJBTU1EMDlRTFZSRlJTQlRTVTBnVW05dmRERUxNQWtHQTFVRUJnd0NWVk14RVRBUEJnTlZCQW9NQ0ZOSlRWOVVSVk5VTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFYnU1S0RxRWkrdzEyUTBkSzJ2K2NQbm9URTdLN21rellvZkpqTU5MRDhHUDFxVld0Mjk4eWZjd296dUFHc3BkN2tEanJ3R0ZzN0pVNWoxbGFhcXBHODZPQ0FWY3dnZ0ZUTUNrR0ExVWREZ1FpQkNEbzQxMEFkS1hETXJkRW9UY1NkVVgvVjRpQmRMQ1VhbGIrMTUzY0FBdnZHakFyQmdOVkhTTUVKREFpZ0NBSzVOemxIRXU3cFdIMWg2VEMvUlJFc0Nob1pueEt1cFRxbzBuaGdJTkpuakFTQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VDTUE0R0ExVWREd1FIQXdVQWhnQUFBRENCMUFZR1o0RUZCUVFDQklISkJJSEdwR05XUlZJQlpsQlZRa3RGV1ZoQkJHN3VTZzZoSXZzTmRrTkhTdHIvbkQ1NkV4T3l1NXBNMktIeVl6RFN3L0JqOWFsVnJkdmZNbjNNS003Z0JyS1hlNUE0NjhCaGJPeVZPWTlaV21xcVJ2Tm9RMDlFUlVGVlZFaFlRUVNjQ2hLM1ZTUlVlT1R5WXgxNU9rbjBYRGh2Vm16Wk1OUmluL29EcVdYQUxTTlIvK2J6djdTNk1GTkRsbkt0NTUvbm9JOENrODMwNGMvSjFvSG44SDdUWjBaSlVrMVhTVVJZSU1jT3hoSTNCSW9NaEUwZ3BpeFl6MFBaaS9oYzRyS3ZPRHhnWXRZU1VtUlVNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJRkZjUFc2NTQ1YTVCTlAreW45VS9jME13ZW1YdnpkZHlsRmEwS2JEdEFOZkFpQXFOa2VJKzBZWHkwT25KVHozZVJQYUpZcVB1QWhFOG5NaXRGSjBBZVFjV2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCOWpDQ0FaeWdBd0lCQWdJUUZRSWhvc0grZVRVUGFWNG14K0VLWFRBS0JnZ3Foa2pPUFFRREFqQTlNUnN3R1FZRFZRUUREQkpQUlNCUFVDMVVSVVVnVTBsTklGSnZiM1F4Q3pBSkJnTlZCQVlNQWxWVE1SRXdEd1lEVlFRS0RBaFRTVTFmVkVWVFZEQWVGdzB4TnpBeE1ERXdNREF3TURCYUZ3MHpOekF4TURFd01EQXdNREJhTUQweEd6QVpCZ05WQkFNTUVrOUZJRTlRTFZSRlJTQlRTVTBnVW05dmRERUxNQWtHQTFVRUJnd0NWVk14RVRBUEJnTlZCQW9NQ0ZOSlRWOVVSVk5VTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFdGFnNnZMcG4xdC8wOUtDN2ZDVUdYQUhnWnN1MmtXTDhqRlBwbTZaWGlwVnBrTC8xeU1ZTXY5ZUR0Z1BmR2hrL25NMlRKbFQvdjJRU1dnMjkwaEdqMXFOK01Id3dLUVlEVlIwT0JDSUVJQXJrM09VY1M3dWxZZldIcE1MOUZFU3dLR2htZkVxNmxPcWpTZUdBZzBtZU1Dc0dBMVVkSXdRa01DS0FJQXJrM09VY1M3dWxZZldIcE1MOUZFU3dLR2htZkVxNmxPcWpTZUdBZzBtZU1BNEdBMVVkRHdRSEF3VUFoZ0FBQURBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFRE1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lGRmNQVzY1NDVhNUJOUCt5bjlVL2MwTXdlbVh2emRkeWxGYTBLYkR0QU5mQWlFQWxoUUlKTGRQWUtqbEpoYnJ4S0lKMCt1a0tMUzY0M3NQRWZHS3ZydmkwVzg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0";

    let raw = json! {
        {
            "CertificateChain": chain,
        }
    };

    let body = json! {
        {
            "mode": "dfgsdgfd",
            "raw": serde_json::to_string(&raw)?,
        }
    };
    // println!("Body: {}", serde_json::to_string_pretty(&body)?);

    let client = reqwest::Client::new();
    let enclave_request = client.post("https://hackprovider.wus.attest.azure.net:443/attest/CyResComponent?api-version=2020-10-01")
        // .header("Authorization", format!("Bearer {}", get_aad_token().await?))
        .header("Content-Type", "application/json")
        .body(serde_json::to_string(&body)?)
        .send().await?;

    println!("CyRes Response: {:#?}", enclave_request);

    let body = enclave_request.text().await?;
    // println!("CyRes Response Body: {:#?}", body);

    Ok(body)
}

fn hex_to_base64(hex: &str) -> Result<String, Box<dyn std::error::Error>> {
    Ok(base64::encode_config(
        Vec::from_hex(hex)?,
        base64::URL_SAFE_NO_PAD,
    ))
}

// async fn get_aad_token() -> Result<String, Box<dyn std::error::Error>> {
//     let tenant = "72f988bf-86f1-41af-91ab-2d7cd011db47";
//     let client_id = "1acd55d3-138b-4538-8521-63215c58e9df";

//     let login_url = format!(
//         "https://login.microsoftonline.com/{}/oauth2/v2.0/token",
//         tenant
//     );

//     // ========================== Make Cert JWT ================================================
//     // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow
//     // https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-certificate-credentials

//     // TODO: use better exp values
//     let my_claims = Claims {
//         aud: login_url.clone(),
//         exp: 10000000000,
//         iss: client_id.to_owned(),
//         jti: GUID::rand().to_string(),
//         nbf: 0,
//         sub: client_id.to_owned(),
//     };

//     let mut header = Header::new(Algorithm::RS256);
//     header.x5t = Some("2YcP/RtHg9MI002scO6552MBLaQ=".to_owned());

//     let cert_token = encode(
//         &header,
//         &my_claims,
//         &EncodingKey::from_rsa_pem(include_bytes!(
//             r#"C:\Users\Lee\Downloads\device-id.key.pem"#
//         ))?,
//     )?;
//     // println!("Cert JWT: {}", cert_token);

//     // ========================== Get token ================================================
//     let client = reqwest::Client::new();

//     // let scope = "https://management.azure.com/.default";
//     let scope = "https://attest.azure.net/.default";

//     let body = &[
//         ("client_id", client_id),
//         ("scope", scope),
//         ("grant_type", "client_credentials"),
//         (
//             "client_assertion_type",
//             "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
//         ),
//         ("client_assertion", &cert_token),
//     ];

//     let get_token = client.post(&login_url).form(body).send().await?;
//     // println!("AAD Token: {:#?}", get_token.text().await);

//     let token: TokenResponse = get_token.json().await?;
//     // println!("AAD Token: {}", token.access_token);

//     Ok(token.access_token)
// }

#[derive(serde::Deserialize, Debug)]
struct TokenResponse {
    token_type: String,
    expires_in: u64,
    // ext_expires_in: u64,
    access_token: String,
}

#[derive(Debug, serde::Serialize, serde::Deserialize)]
struct Claims {
    aud: String,
    exp: usize,
    iss: String,
    jti: String,
    nbf: usize,
    sub: String,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_encoding() {
        let input
        let expected = "AQAAAAIAAADoEQAAAAAAAAMAAgAAAAAABQAKAJOacjP3nEyplAoNs5V_BgcJv-yBVtsTjgNWObBHMpWiAAAAABERAwX_gAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAAABwAAAAAAAACqx-TWSGGxMuTK6ZDfIcU0fdBSvZ2tWv3_Erfn6_4cnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYrpryrWXAMNAvbzTa_dMbg1oks35FnHcqTvL__ge-fIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8iOAlCIfHshTRXzbIRDBZba5J12LPb-PjuW7Fct-yEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQQAABpqD-xEXoUIE9ZSlPAeZMksw4C9UilFm_v34hw5VBT1DPJPx0gVL3vxu9Ze5afeY6uIhvvVKk0qimoxlhf0eWIezPCQ2riaxloUn3Id4rXqS_NTRYeYo-ZYghGHfo3QdQyz5tGsSNDeHAowteF5WztNerr-s31bPP3ekB9hexoVBERAwX_gAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAAAAAAABwAAAAAAAABg2Fryi-jRxAoI2YsAnV-KzBOEo4XPRggA5Hh5HRqXnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjE9XddeWUD6WE393xoqCmgBWrI3tcBQLCBsJRJDFe_8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaBLUCocCZLCGOhoYKrxDHeDw1uVV48NK8zXOXO51DtoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFJ50AiwNtxq7ANCeUXkXNn_s9FDI2icOHZDf53Bk9ncPhelSfZq0IAdUpVHHVdh39MpdebAarXAYJjILoOQ40sgAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fBQDMDQAALS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVnVENDQkNlZ0F3SUJBZ0lWQU5lcExSQS9zdUdoWjVkRG5KQ25KY3BBc3ZIRU1Bb0dDQ3FHU000OUJBTUMKTUhFeEl6QWhCZ05WQkFNTUdrbHVkR1ZzSUZOSFdDQlFRMHNnVUhKdlkyVnpjMjl5SUVOQk1Sb3dHQVlEVlFRSwpEQkZKYm5SbGJDQkRiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WCkJBZ01Ba05CTVFzd0NRWURWUVFHRXdKVlV6QWVGdzB5TVRBeU1qQXhORFUyTkRGYUZ3MHlPREF5TWpBeE5EVTIKTkRGYU1IQXhJakFnQmdOVkJBTU1HVWx1ZEdWc0lGTkhXQ0JRUTBzZ1EyVnlkR2xtYVdOaGRHVXhHakFZQmdOVgpCQW9NRVVsdWRHVnNJRU52Y25CdmNtRjBhVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHCkExVUVDQXdDUTBFeEN6QUpCZ05WQkFZVEFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKenVSUS9lTllRb1BNaW9ZV1MxY3Rpa3FrczRXVUVRZjgyNTEwSHZ0b0pVZklYVUxXbGxiYnFranNXYTQ5dzA0NAphMVhKaFN3Qk5GWi9Kb0ptWVZLMVhLT0NBcHN3Z2dLWE1COEdBMVVkSXdRWU1CYUFGTkRvcXRwMTEva3VTUmVZClBIc1VaZERWOGxsTk1GOEdBMVVkSHdSWU1GWXdWS0JTb0ZDR1RtaDBkSEJ6T2k4dllYQnBMblJ5ZFhOMFpXUnoKWlhKMmFXTmxjeTVwYm5SbGJDNWpiMjB2YzJkNEwyTmxjblJwWm1sallYUnBiMjR2ZGpJdmNHTnJZM0pzUDJOaApQWEJ5YjJObGMzTnZjakFkQmdOVkhRNEVGZ1FVZG12ZnNPcGVRanFwRWwxSDZ0cURkd1NKTDI4d0RnWURWUjBQCkFRSC9CQVFEQWdiQU1Bd0dBMVVkRXdFQi93UUNNQUF3Z2dIVUJna3Foa2lHK0UwQkRRRUVnZ0hGTUlJQndUQWUKQmdvcWhraUcrRTBCRFFFQkJCQlhidzdNT1JNM2pRNDVGU2ZzSjhISU1JSUJaQVlLS29aSWh2aE5BUTBCQWpDQwpBVlF3RUFZTEtvWklodmhOQVEwQkFnRUNBUkV3RUFZTEtvWklodmhOQVEwQkFnSUNBUkV3RUFZTEtvWklodmhOCkFRMEJBZ01DQVFJd0VBWUxLb1pJaHZoTkFRMEJBZ1FDQVFRd0VBWUxLb1pJaHZoTkFRMEJBZ1VDQVFFd0VRWUwKS29aSWh2aE5BUTBCQWdZQ0FnQ0FNQkFHQ3lxR1NJYjRUUUVOQVFJSEFnRUdNQkFHQ3lxR1NJYjRUUUVOQVFJSQpBZ0VBTUJBR0N5cUdTSWI0VFFFTkFRSUpBZ0VBTUJBR0N5cUdTSWI0VFFFTkFRSUtBZ0VBTUJBR0N5cUdTSWI0ClRRRU5BUUlMQWdFQU1CQUdDeXFHU0liNFRRRU5BUUlNQWdFQU1CQUdDeXFHU0liNFRRRU5BUUlOQWdFQU1CQUcKQ3lxR1NJYjRUUUVOQVFJT0FnRUFNQkFHQ3lxR1NJYjRUUUVOQVFJUEFnRUFNQkFHQ3lxR1NJYjRUUUVOQVFJUQpBZ0VBTUJBR0N5cUdTSWI0VFFFTkFRSVJBZ0VLTUI4R0N5cUdTSWI0VFFFTkFRSVNCQkFSRVFJRUFZQUdBQUFBCkFBQUFBQUFBTUJBR0NpcUdTSWI0VFFFTkFRTUVBZ0FBTUJRR0NpcUdTSWI0VFFFTkFRUUVCZ0NRYnRVQUFEQVAKQmdvcWhraUcrRTBCRFFFRkNnRUFNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJQlljRlpId0lORytVaWNVdWtqcwpSZGtoLzFxODgyU05lTjVQMEJoMGh1eVlBaUVBcEpOREd4aVJqVUdBcnlaR002TGdQbHFia3p2VU9rcS95ek1uCmtnVHFIRE09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNsekNDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFExTURoYUZ3MHpNekExTWpFeE1EUTFNRGhhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWpjbXd3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUMvOWorODRUK0h6dFZPL3NPUUJXSmJTZCsvMnVleEsKNCthQTBqY0ZCTGNwQWlBM2RoTXJGNWNENTJ0NkZxTXZBSXBqOFhkR215MmJlZWxqTEpLK3B6cGNSQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqakNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdOREV4TVZvWERUTXpNRFV5TVRFd05ERXhNRm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtTnliREFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNBQXdSUUlnUVFzLzA4cnljZFBhdUNGazhVUFFYQ01BbHNsb0JlN053YVFHVGNkcGEwRUMKSVFDVXQ4U0d2eEttanBjTS96MFdQOUR2bzhoMms1ZHUxaVdEZEJrQW4rMGlpQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAA"; // base64::encode_config(quote_hex, base64::URL_SAFE);

        assert_eq!(hex_to_base64(input).unwrap(), expected);
    }
}
